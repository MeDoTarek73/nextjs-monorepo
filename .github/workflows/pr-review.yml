name: Deploy PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  deploy-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Check branch prefix
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          if [[ $BRANCH_NAME != feature/* ]]; then
            echo "‚ùå Not a feature branch ($BRANCH_NAME)"
            exit 0
          fi

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install kompose and yq
        run: |
          curl -L https://github.com/kubernetes/kompose/releases/download/v1.31.2/kompose-linux-amd64 -o kompose
          chmod +x kompose && sudo mv kompose /usr/local/bin/
          sudo snap install yq

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push PR Docker image
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          IMAGE_TAG=${BRANCH_NAME#feature/}
          IMAGE_TAG=$(echo $IMAGE_TAG | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="ghcr.io/$REPO_NAME:$IMAGE_TAG"

          echo "Building image $IMAGE_NAME"
          docker build -t $IMAGE_NAME -f apps/nextjs-app/Dockerfile .
          docker push $IMAGE_NAME

          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Set up kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_DATA }}" | base64 --decode > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config get-contexts

      - name: Deploy PR environment
        run: |
          export KUBECONFIG=kubeconfig

          NS=${{ github.head_ref }}
          NS=${NS#feature/}
          NS=$(echo $NS | tr '[:upper:]' '[:lower:]')
          echo "üß± Creating namespace: $NS"
          kubectl create namespace $NS --dry-run=client -o yaml | kubectl apply -f -

          echo "üîë Copying GHCR secret into namespace"
          if kubectl get secret ghcr-secret -n default >/dev/null 2>&1; then
            kubectl get secret ghcr-secret -n default -o yaml | \
              sed "s/namespace: default/namespace: $NS/" | kubectl apply -f -
          else
            echo "‚ö†Ô∏è Secret 'ghcr-secret' not found in default namespace!"
          fi

          echo "üì¶ Converting docker-compose.yml to Kubernetes manifests"
          export IMAGE_TAG=$IMAGE_TAG
          kompose convert -f apps/nextjs-app/docker-compose.yml -o k8s/

          echo "üõ†Ô∏è Checking Java microservice image"
          if ! docker manifest inspect "ghcr.io/medotarek73/java-microservice-api:$IMAGE_TAG" >/dev/null 2>&1; then
            echo "Java microservice image not found, using :latest"
            sed -i "s|ghcr.io/medotarek73/java-microservice-api:$IMAGE_TAG|ghcr.io/medotarek73/java-microservice-api:latest|g" k8s/backend-service-deployment.yaml
          fi

          echo "üß© Injecting namespace and imagePullSecrets"
          for file in k8s/*.yaml; do
            # Inject namespace
            if grep -q "namespace:" "$file"; then
              sed -i "s/namespace: .*/namespace: $NS/" "$file"
            else
              sed -i "s/^metadata:$/metadata:\n  namespace: $NS/" "$file"
            fi

            # Inject imagePullSecrets
            if grep -q "spec:" "$file" && ! grep -q "imagePullSecrets" "$file"; then
              yq eval '.spec.template.spec.imagePullSecrets = [{"name":"ghcr-secret"}]' -i "$file" || true
            fi
          done

          echo "üöÄ Applying manifests to namespace $NS"
          kubectl apply -n $NS -f k8s/

          HOST="$NS.semibots.com"
          echo "üåê Creating ingress for $HOST"

          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: ${NS}-ingress
            namespace: $NS
            annotations:
              cert-manager.io/cluster-issuer: "letsencrypt-dns"
          spec:
            ingressClassName: traefik
            tls:
            - hosts:
              - $HOST
              secretName: ${NS}-tls
            rules:
            - host: $HOST
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: frontend-application
                      port:
                        number: 3000
          EOF

          echo "‚úÖ Deployment complete! https://$HOST"
